{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","axios","get","then","response","data","newObject","post","id","put","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","i","key","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"mNAaeA,EAXF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACZC,EAAQF,EAAKG,UAAY,qBAAuB,iBAEtD,OACI,wBAAIC,UAAU,QACTJ,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,K,gBCUjC,EAfA,WAEX,OADgBK,IAAMC,IAHV,cAIGC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa9B,EAVA,SAAAC,GAEX,OADgBL,IAAMM,KARV,aAQwBD,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ9B,EALA,SAACG,EAAIF,GAEhB,OADgBL,IAAMQ,IAAN,UAbJ,aAaI,YAAwBD,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCD9BK,EAZM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OAAgB,OAAZA,EACO,KAIP,yBAAKb,UAAU,SACVa,ICJPC,EAAS,WAOX,OACI,yBAAKC,MAPW,CAChBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAKN,6BACA,uGAsFGC,EAjFH,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACPC,EADO,KACAC,EADA,OAEgBF,mBAAS,IAFzB,mBAEPG,EAFO,KAEEC,EAFF,OAGgBJ,oBAAS,GAHzB,mBAGPK,EAHO,KAGEC,EAHF,OAI0BN,mBAAS,MAJnC,mBAIPO,EAJO,KAIOC,EAJP,KAMdC,qBAAU,WACNC,IAEKzB,MAAK,SAAA0B,GACFT,EAASS,QAElB,IAEH,IAsCMC,EAAcP,EAAUJ,EAAQA,EAAMY,QAAO,SAAArC,GAAI,OAAIA,EAAKG,aAEhE,OACI,6BACI,qCACA,kBAAC,EAAD,CAAcc,QAASc,IACvB,6BACI,4BAAQzB,QAAS,kBAAMwB,GAAYD,KAAnC,QACUA,EAAU,YAAc,QAGtC,4BACKO,EAAYE,KAAI,SAACtC,EAAMuC,GAAP,OACb,kBAAC,EAAD,CACIC,IAAKD,EACLvC,KAAMA,EACNC,iBAAkB,kBAlCX,SAAAa,GACvB,IAAMd,EAAOyB,EAAMgB,MAAK,SAAAC,GAAC,OAAIA,EAAE5B,KAAOA,KAChC6B,EAAW,eAAQ3C,EAAR,CAAcG,WAAYH,EAAKG,YAEhD+B,EACYpB,EAAI6B,GACXlC,MAAK,SAAAmC,GACFlB,EAASD,EAAMa,KAAI,SAAAtC,GAAI,OAAIA,EAAKc,KAAOA,EAAKd,EAAO4C,SAEtDC,OAAM,SAAAC,GACHd,EAAgB,SAAD,OAAUhC,EAAKK,QAAf,sCACf0C,YAAW,WACPf,EAAgB,QACjB,KACHN,EAASD,EAAMY,QAAO,SAAAK,GAAC,OAAIA,EAAE5B,KAAOA,SAoBJkC,CAAmBhD,EAAKc,WAI5D,0BAAMmC,SA1DE,SAACC,GACbA,EAAMC,iBACN,IAAMC,EAAa,CACf/C,QAASsB,EACT0B,MAAM,IAAIC,MAAOC,cACjBpD,UAAWqD,KAAKC,SAAW,IAG/BvB,EACYkB,GACP3C,MAAK,SAAAmC,GACFlB,EAASD,EAAMiC,OAAOd,IACtBhB,EAAW,SA+CX,2BAAO+B,MAAOhC,EAASiC,SA3CV,SAACV,GACtBtB,EAAWsB,EAAMW,OAAOF,UA2ChB,4BAAQG,KAAK,UAAb,SAEJ,kBAAC,EAAD,Q,MC3FZC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.961958f7.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n    const label = note.important ? 'make not important' : 'make important'\r\n\r\n    return (\r\n        <li className='note'>\r\n            {note.content}\r\n            <button onClick={toggleImportance}>{label}</button>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Note","import axios from 'axios'\r\nconst baseUrl = '/api/notes'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update }","import React from 'react';\r\n\r\nconst Notification = ({ message }) => {\r\n    if (message === null) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className=\"error\">\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification","import React, { useState, useEffect } from 'react'\r\nimport Note from './components/Note'\r\nimport noteService from './services/notes'\r\nimport Notification from './components/Notification'\r\n\r\nconst Footer = () => {\r\n    const footerStyle = {\r\n        color: 'green',\r\n        fontStyle: 'italic',\r\n        fontSize: 16\r\n    }\r\n\r\n    return (\r\n        <div style={footerStyle}>\r\n            <br />\r\n            <em>Note app, Department of Computer Science, University of Helsinki 2020</em>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst App = () => {\r\n    const [notes, setNotes] = useState([])\r\n    const [newNote, setNewNote] = useState('')\r\n    const [showAll, setShowAll] = useState(true)\r\n    const [errorMessage, setErrorMessage] = useState(null)\r\n\r\n    useEffect(() => {\r\n        noteService\r\n            .getAll()\r\n            .then(initialNotes => {\r\n                setNotes(initialNotes)\r\n            })\r\n    }, [])\r\n\r\n    const addNote = (event) => {\r\n        event.preventDefault()\r\n        const noteObject = {\r\n            content: newNote,\r\n            date: new Date().toISOString(),\r\n            important: Math.random() > 0.5\r\n        }\r\n\r\n        noteService\r\n            .create(noteObject)\r\n            .then(returnedNote => {\r\n                setNotes(notes.concat(returnedNote))\r\n                setNewNote('')\r\n            })\r\n    }\r\n\r\n    const handleNoteChange = (event) => {\r\n        setNewNote(event.target.value)\r\n    }\r\n\r\n    const toggleImportanceOf = id => {\r\n        const note = notes.find(n => n.id === id)\r\n        const changedNote = { ...note, important: !note.important }\r\n\r\n        noteService\r\n            .update(id, changedNote)\r\n            .then(returnedNote => {\r\n                setNotes(notes.map(note => note.id !== id ? note : returnedNote))\r\n            })\r\n            .catch(error => {\r\n                setErrorMessage(`Note '${note.content}' was already removed from server`)\r\n                setTimeout(() => {\r\n                    setErrorMessage(null)\r\n                }, 5000)\r\n                setNotes(notes.filter(n => n.id !== id))\r\n            })\r\n    }\r\n\r\n    const notesToShow = showAll ? notes : notes.filter(note => note.important)\r\n\r\n    return (\r\n        <div>\r\n            <h1>Notes</h1>\r\n            <Notification message={errorMessage} />\r\n            <div>\r\n                <button onClick={() => setShowAll(!showAll)}>\r\n                    show {showAll ? 'important' : 'all'}\r\n                </button>\r\n            </div>\r\n            <ul>\r\n                {notesToShow.map((note, i) =>\r\n                    <Note\r\n                        key={i}\r\n                        note={note}\r\n                        toggleImportance={() => toggleImportanceOf(note.id)}\r\n                    />\r\n                )}\r\n            </ul>\r\n            <form onSubmit={addNote}>\r\n                <input value={newNote} onChange={handleNoteChange} />\r\n                <button type=\"submit\">save</button>\r\n            </form>\r\n            <Footer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n)"],"sourceRoot":""}